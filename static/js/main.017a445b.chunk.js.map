{"version":3,"sources":["utils.js","constants.js","components/Puzzle.js","App.tsx","serviceWorker.js","index.js"],"names":["compareArr","arr1","arr2","areEquals","forEach","e1","e2","length","cloneArr","board","slice","shuffleArr","array","temp","i","j","Math","floor","random","CORRECT_ARR","LEFT_COLUMNS_ARR","Puzzle","_useState","useState","_useState2","Object","slicedToArray","setBoard","_useState3","_useState4","finish","setFinish","_useState5","_useState6","moves","setMoves","react_default","a","createElement","className","map","item","classNameEmpty","classNameStatus","concat","disabled","onClick","currentPos","newBoard","sides","emptyPos","arr","find","side","getEmptyPosition","columnBelow","pos","getColumnBelowPosition","splice","handleUpdateBoard","key","handleRestart","App","Fragment","components_Puzzle","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.017a445b.chunk.js","sourcesContent":["export const compareArr = (arr1, arr2) => {\n\tlet areEquals = false;\n\n\tarr1.forEach(e1 =>\n\t\tarr2.forEach(e2 => {\n\t\t\tif (e1.length > 1 && e2.length) {\n\t\t\t\tareEquals = compareArr(e1, e2);\n\t\t\t} else if (e1 !== e2) {\n\t\t\t\tareEquals = false;\n\t\t\t} else {\n\t\t\t\tareEquals = true;\n\t\t\t}\n\t\t})\n\t);\n\n\treturn areEquals;\n};\n\nexport const getColumnBelowPosition = (arr, i) =>\n\tarr.find(pos => pos === i + 1);\n\nexport const getSides = i => [i - 4, i + 1, i + 4, i - 1];\n\nexport const cloneArr = board => board.slice(0);\n\nexport const getEmptyPosition = (arr, sides) =>\n\tsides.find(side => arr[side] === -1);\n\nexport const shuffleArr = array => {\n\tlet i = array.length;\n\tlet j = 0;\n\tlet temp;\n\n\twhile (i--) {\n\t\tj = Math.floor(Math.random() * (i + 1));\n\t\ttemp = array[i];\n\t\tarray[i] = array[j];\n\t\tarray[j] = temp;\n\t}\n\n\treturn array;\n};\n\n// export const shuffleArr = arr => {\n// \tlet currentIndex = arr.length\n// \tlet temporaryValue;\n// \tlet randomIndex;\n\n// \t// While there remain elements to shuffle...\n// \twhile (0 !== currentIndex) {\n\n// \t\t// Pick a remaining element...\n// \t\trandomIndex = Math.floor(Math.random() * currentIndex);\n// \t\tcurrentIndex -= 1;\n\n// \t\t// And swap it with the current element.\n// \t\ttemporaryValue = arr[currentIndex];\n// \t\tarr[currentIndex] = arr[randomIndex];\n// \t\tarr[randomIndex] = temporaryValue;\n// \t}\n\n// \treturn arr;\n// }\n","export const CORRECT_ARR = [\n\t1,\n\t2,\n\t3,\n\t4,\n\t5,\n\t6,\n\t7,\n\t8,\n\t9,\n\t10,\n\t11,\n\t12,\n\t13,\n\t14,\n\t15,\n\t-1\n];\n\nexport const LEFT_COLUMNS_ARR = [0, 4, 8, 12];\n","import React, {useState} from 'react';\nimport './style.css';\nimport {\n\tshuffleArr,\n\tcompareArr,\n\tcloneArr,\n\tgetSides,\n\tgetEmptyPosition,\n\tgetColumnBelowPosition\n} from '../utils';\nimport {CORRECT_ARR, LEFT_COLUMNS_ARR} from '../constants';\n\nconst Puzzle = () => {\n\tconst [board, setBoard] = useState(shuffleArr(cloneArr(CORRECT_ARR)));\n\tconst [finish, setFinish] = useState(compareArr(board, CORRECT_ARR));\n\n\tlet [moves, setMoves] = useState(0);\n\n\tconst handleRestart = () => {\n\t\tconst newBoard = shuffleArr(cloneArr(CORRECT_ARR));\n\n\t\t//set new board\n\t\tsetBoard(newBoard);\n\n\t\t//set moves to zero\n\t\tsetMoves(0);\n\n\t\t//set finish to false\n\t\tsetFinish(false);\n\t};\n\n\tconst handleUpdateBoard = (currentPos, item) => {\n\t\t//clone board\n\t\tconst newBoard = cloneArr(board);\n\n\t\t//sides [top, right, bottom, left]\n\t\tconst sides = getSides(currentPos);\n\n\t\t//find empty position\n\t\tconst emptyPos = getEmptyPosition(board, sides);\n\n\t\t//search if the next item is in the column below\n\t\tconst columnBelow = getColumnBelowPosition(\n\t\t\tLEFT_COLUMNS_ARR,\n\t\t\tcurrentPos\n\t\t);\n\n\t\tif (board[emptyPos] === -1 && board[columnBelow] !== -1) {\n\t\t\tnewBoard.splice(emptyPos, 1, item);\n\t\t\tnewBoard.splice(currentPos, 1, -1);\n\n\t\t\t//set one more click\n\t\t\tsetMoves(moves + 1);\n\t\t}\n\n\t\t//set new board\n\t\tsetBoard(newBoard);\n\n\t\t//set finish if arrays are equals\n\t\tsetFinish(compareArr(newBoard, CORRECT_ARR));\n\t};\n\n\treturn (\n\t\t<div className='game'>\n\t\t\t<div className='board'>\n\t\t\t\t{board.map((item, i) => {\n\t\t\t\t\tconst classNameEmpty = item > 0 ? '' : 'empty';\n\t\t\t\t\tconst classNameStatus =\n\t\t\t\t\t\titem === i + 1 ? 'correct' : 'error';\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName={`button ${classNameEmpty} ${classNameStatus}`}\n\t\t\t\t\t\t\tdisabled={item === -1 && true}\n\t\t\t\t\t\t\tonClick={() => handleUpdateBoard(i, item)}\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{item > 0 ? item : ''}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\n\t\t\t<div className='status'>\n\t\t\t\t<div>moves: {moves}</div>\n\n\t\t\t\t{finish && (\n\t\t\t\t\t<div className='finish'>\n\t\t\t\t\t\t<div>finished!</div>\n\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName='button'\n\t\t\t\t\t\t\tonClick={() => handleRestart()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\trestart\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Puzzle;\n","import React from 'react';\nimport Puzzle from './components/Puzzle';\nimport './style.css';\n\nconst App = () => (\n\t<>\n\t\t<Puzzle />\n\n\t\t<a\n\t\t\tclassName='made-by'\n\t\t\thref='https://github.com/interaminense/fifteen-puzzle-game'\n\t\t\ttarget='_blank'\n\t\t\trel='noopener noreferrer'\n\t\t>\n\t\t\tFork me on github . @interaminense\n\t\t</a>\n\t</>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}